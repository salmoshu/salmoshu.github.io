import{_ as d,c as r,a0 as e,o as c}from"./chunks/framework.D5XSuxOt.js";const u=JSON.parse('{"title":"附录C. C API","description":"","frontmatter":{"sidebarDepth":2},"headers":[],"relativePath":"algorithm/RTKLIB手册/07-appendixC.md","filePath":"algorithm/RTKLIB手册/07-appendixC.md"}'),s={name:"algorithm/RTKLIB手册/07-appendixC.md"};function n(a,t,o,i,m,l){return c(),r("div",null,t[0]||(t[0]=[e('<h1 id="附录c-c-api" tabindex="-1">附录C. C API <a class="header-anchor" href="#附录c-c-api" aria-label="Permalink to &quot;附录C. C API&quot;">​</a></h1><p>下表展示了RTKLIB库函数列表。关于库函数的详细API（调用约定、函数描述、输入和输出参数及其类型、返回值及其类型），请参考源程序中每个函数的头部注释，位于<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\src</code>。关于API相关数据类型的定义，请参考<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\src</code>中的头文件rtklib.h。</p><p>RTKLIB API参考手册也将提供API使用的详细规范和一些示例。</p><p><strong>Table C-1 RTKLIB API 函数列表</strong></p><table><thead><tr><th class="tg-capi">函数</th><th class="tg-capi">描述</th><th class="tg-capi">源码</th><th class="tg-capi">备注</th></tr></thead><tbody><tr><th colspan="4" style="text-align:center;">卫星存储编号/卫星系统函数</th></tr><tr><td>satno()</td><td> 卫星系统与PRN（或槽号）转换为卫星存储编号<br></td><td>rtkcmn.c</td><td> 槽号通常指GLO卫星在轨道中的位置<br> 卫星存储编号是一种方便算法存储与运算的自定义编号。 </td></tr><tr><td>satsys()</td><td>卫星存储编号转换为卫星系统</td><td>rtkcmn.c</td><td></td></tr><tr><td>satid2no()</td><td>卫星ID转换为卫星存储编号</td><td>rtkcmn.c</td><td>卫星ID如&quot;G01&quot;</td></tr><tr><td>satno2id()</td><td>卫星存储编号转换为卫星ID</td><td>rtkcmn.c</td><td></td></tr><tr><td>obs2code()</td><td>观测信号类型字符串转换为CODE_宏</td><td>rtkcmn.c</td><td>观测信号类型字符串如&quot;1C&quot;，两者表示相同含义，不过CODE_宏用于代码处理更方便</td></tr><tr><td>code2obs()</td><td>CODE_宏转换为观测信号类型字符串</td><td>rtkcmn.c</td><td></td></tr><tr><td>satexclude()</td><td>检测卫星是否被剔除</td><td>rtkcmn.c</td><td>主要依据配置信息与卫星自身数据中的健康标识</td></tr><tr><td>testsnr()</td><td>检测卫星SNR是否符合条件</td><td>rtkcmn.c</td><td></td></tr><tr><td>setcodepri()</td><td>设置卫星系统中多个频率信号的码优先级</td><td>rtkcmn.c</td><td>并未看到哪里使用了它</td></tr><tr><td>getcodepri()</td><td>获取卫星系统中多个频率信号的码优先级</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">矩阵和向量操作</th></tr><tr><td>mat()</td><td>新建矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>imat()</td><td>新建整数矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>zeros()</td><td>新建零矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>eye()</td><td>新建单位矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>dot()</td><td>内积</td><td>rtkcmn.c</td><td></td></tr><tr><td>norm()</td><td>欧几里得范数</td><td>rtkcmn.c</td><td></td></tr><tr><td>cross3()</td><td>三维向量的外积</td><td>rtkcmn.c</td><td></td></tr><tr><td>normv3()</td><td>归一化三维向量</td><td>rtkcmn.c</td><td></td></tr><tr><td>matcpy()</td><td>复制矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>matmul()</td><td>矩阵乘法</td><td>rtkcmn.c</td><td></td></tr><tr><td>matinv()</td><td>矩阵求逆</td><td>rtkcmn.c</td><td></td></tr><tr><td>solve()</td><td>求解线性方程</td><td>rtkcmn.c</td><td></td></tr><tr><td>lsq()</td><td>最小二乘估计</td><td>rtkcmn.c</td><td></td></tr><tr><td>filter()</td><td>卡尔曼滤波状态更新</td><td>rtkcmn.c</td><td></td></tr><tr><td>smoother()</td><td>区间平滑器</td><td>rtkcmn.c</td><td></td></tr><tr><td>matprint()</td><td>打印矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>matfprint()</td><td>打印矩阵到文件</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">时间和字符串操作函数</th></tr><tr><td>str2num()</td><td>字符串转数字</td><td>rtkcmn.c</td><td></td></tr><tr><td>str2time()</td><td>字符串转时间</td><td>rtkcmn.c</td><td></td></tr><tr><td>time2str()</td><td>时间转字符串</td><td>rtkcmn.c</td><td></td></tr><tr><td>epoch2time()</td><td>日历时间转gtime_t</td><td>rtkcmn.c</td><td>日历时间为年月日时分秒</td></tr><tr><td>time2epoch()</td><td>gtime_t转日历时间</td><td>rtkcmn.c</td><td></td></tr><tr><td>gpst2time()</td><td>GPS时间周、周内秒格式转gtime_t</td><td>rtkcmn.c</td><td></td></tr><tr><td>time2gpst()</td><td>GPS时间gtime_t格式转周、周内秒</td><td>rtkcmn.c</td><td></td></tr><tr><td>gst2time()</td><td>GAL时间周、周内秒格式转gtime_t</td><td>rtkcmn.c</td><td></td></tr><tr><td>time2gst()</td><td>GAL时间gtime_t格式转周、周内秒</td><td>rtkcmn.c</td><td></td></tr><tr><td>bdt2time()</td><td>BDS时间周、周内秒格式转gtime_t</td><td>rtkcmn.c</td><td></td></tr><tr><td>time2bdt()</td><td>BDS时间gtime_t格式转周、周内秒</td><td>rtkcmn.c</td><td></td></tr><tr><td>time_str()</td><td>获取时间字符串</td><td>rtkcmn.c</td><td></td></tr><tr><td>timeadd()</td><td>求时间和</td><td>rtkcmn.c</td><td></td></tr><tr><td>timediff()</td><td>求时间差</td><td>rtkcmn.c</td><td></td></tr><tr><td>gpst2utc()</td><td>GPS时间转UTC时间</td><td>rtkcmn.c</td><td>输入输出均为gtime_t</td></tr><tr><td>utc2gpst()</td><td>UTC时间转GPS时间</td><td>rtkcmn.c</td><td>输入输出均为gtime_t</td></tr><tr><td>gpst2bdt()</td><td>GPS Time to BDT</td><td>rtkcmn.c</td><td></td></tr><tr><td>bdt2gpst()</td><td>BDT时间转GPS时间</td><td>rtkcmn.c</td><td></td></tr><tr><td>timeget()</td><td>获取当前UTC时间</td><td>rtkcmn.c</td><td></td></tr><tr><td>timeset()</td><td>设置当前UTC时间</td><td>rtkcmn.c</td><td></td></tr><tr><td>time2doy()</td><td>将传入时间转换为年内天数</td><td>rtkcmn.c</td><td></td></tr><tr><td>utc2gmst()</td><td>将UTC时间转换为格林威治平均恒星时（GMST）</td><td>rtkcmn.c</td><td></td></tr><tr><td>adjgpsweek()</td><td>通过当前的 CPU 时间来调整 GPS 周数</td><td>rtkcmn.c</td><td>GPS时间每1024周（约19.7年）会重置一次，因此需要通过外部信息（如当前时间）来调整GPS周数</td></tr><tr><td>tickget()</td><td>获取当前时间的毫秒级时间戳（tick）</td><td>rtkcmn.c</td><td></td></tr><tr><td>sleepms()</td><td>让程序暂停执行指定的毫秒数</td><td>rtkcmn.c</td><td></td></tr><tr><td>reppath()</td><td>替换文件路径</td><td>rtkcmn.c</td><td></td></tr><tr><td>reppaths()</td><td>替换多个文件路径</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">坐标转换函数</th></tr><tr><td>ecef2pos()</td><td>ECEF转地理坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>pos2ecef()</td><td>地理坐标系转ECEF坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>ecef2enu()</td><td>ECEF转ENU坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>enu2ecef()</td><td>ENU转ECEF坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>covenu()</td><td>将ECEF坐标系中的协方差矩阵转换至ENU坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>covecef()</td><td>将ENU坐标系中的协方差矩阵转换至ECEF坐标系</td><td>rtkcmn.c</td><td></td></tr><tr><td>xyz2enu()</td><td>计算ECEF到ENU的转换矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>eci2ecef()</td><td>计算ECI到ECEF的转换矩阵</td><td>rtkcmn.c</td><td></td></tr><tr><td>deg2dms()</td><td>将十进制度表示的经纬度转换为度、分、秒（DMS）格式</td><td>rtkcmn.c</td><td></td></tr><tr><td>dms2deg()</td><td>将度、分、秒（DMS）转换为十进制度表示的经纬度格式</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">输入/输出函数</th></tr><tr><td>readpos()</td><td>Read station positions</td><td>rtkcmn.c</td><td></td></tr><tr><td>sortobs()</td><td>Sort observation data</td><td>rtkcmn.c</td><td></td></tr><tr><td>uniqnav()</td><td>Delete duplicated ephemerides in navigation data</td><td>rtkcmn.c</td><td></td></tr><tr><td>screent()</td><td>Screen data by time and interval</td><td>rtkcmn.c</td><td></td></tr><tr><td>readnav()</td><td>Read navigation data from file</td><td>rtkcmn.c</td><td></td></tr><tr><td>savenav()</td><td>Save navigation data to file</td><td>rtkcmn.c</td><td></td></tr><tr><td>freeobs()</td><td>Free memory for observation data</td><td>rtkcmn.c</td><td></td></tr><tr><td>freenav()</td><td>Free memory for navigation data</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">Debug trace functions</th></tr><tr><td>traceopen()</td><td>Open trace file</td><td>rtkcmn.c</td><td></td></tr><tr><td>traceclose()</td><td>Close trace file</td><td>rtkcmn.c</td><td></td></tr><tr><td>trace()</td><td>Output trace</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracet()</td><td>Output trace with time tag</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracemat()</td><td>Output trace as matrix printing</td><td>rtkcmn.c</td><td></td></tr><tr><td>traceobs()</td><td>Output trace as observation data printing</td><td>rtkcmn.c</td><td></td></tr><tr><td>traceonav()</td><td>Output trace as GPS navigation messages</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracegnav()</td><td>Output trace as GLONASS navigation messages</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracehnav()</td><td>Output trace as GEO navigation messages</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracepeph()</td><td>Output trace as precise ephemeris</td><td>rtkcmn.c</td><td></td></tr><tr><td>tracepclk()</td><td>Output trace as precise clock</td><td>rtkcmn.c</td><td></td></tr><tr><td>traceb()</td><td>Output trace as binary dump</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Platform dependent functions**</th></tr><tr><td>execcmd()</td><td>Execute command</td><td>rtkcmn.c</td><td></td></tr><tr><td>expath()</td><td>Expand file path</td><td>rtkcmn.c</td><td></td></tr><tr><td>createdir()</td><td>Create directory</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Positioning models**</th></tr><tr><td>satwavelen()</td><td>Satellite signal carrier wave length</td><td>rtkcmn.c</td><td></td></tr><tr><td>satazel()</td><td>Satellite azimuth/elevation angle</td><td>rtkcmn.c</td><td></td></tr><tr><td>geodist()</td><td>Geometric distance</td><td>rtkcmn.c</td><td></td></tr><tr><td>dops()</td><td>Compute DOPs</td><td>rtkcmn.c</td><td></td></tr><tr><td>csmooth()</td><td>Carrier smoothing</td><td>rtkcmn.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Atmosphere models**</th></tr><tr><td>ionmodel()</td><td>Ionospheric model</td><td>rtkcmn.c</td><td></td></tr><tr><td>ionmapf()</td><td>Ionospheric mapping function</td><td>rtkcmn.c</td><td></td></tr><tr><td>ionppp()</td><td>Ionospheric pierce point position</td><td>rtkcmn.c</td><td></td></tr><tr><td>tropmodel()</td><td>Tropospheric model</td><td>rtkcmn.c</td><td></td></tr><tr><td>tropmapf()</td><td>Tropospheric mapping function</td><td>rtkcmn.c</td><td></td></tr><tr><td>iontec()</td><td>Ionosphere model by TEC grid data</td><td>ionex.c</td><td></td></tr><tr><td>readtec()</td><td>Read IONEX TEC grid file</td><td>ionex.c</td><td></td></tr><tr><td>ionocorr()</td><td>Ionosphere correction</td><td>pntpos.c</td><td></td></tr><tr><td>tropcorr()</td><td>Troposphere correction</td><td>pntpos.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Antenna models**</th></tr><tr><td>readpcv()</td><td>Read antenna parameters</td><td>rtkcmn.c</td><td></td></tr><tr><td>searchpcv()</td><td>Search antenna parameters</td><td>rtkcmn.c</td><td></td></tr><tr><td>antmodel()</td><td>Receiver antenna model</td><td>rtkcmn.c</td><td></td></tr><tr><td>antmodel_s()</td><td>Satellite antenna model</td><td>rtkcmn.c</td></tr><tr><th colspan="4" style="text-align:center;">**Earth tides models**</th></tr><tr><td>sunmoonpos()</td><td>Sun and moon position</td><td>rtkcmn.c</td><td></td></tr><tr><td>tidedisp()</td><td>Displacements by earth tides</td><td>ppp.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Geoid model**</th></tr><tr><td>opengeoid()</td><td>Open external geoid file</td><td>geoid.c</td><td></td></tr><tr><td>closegeoid()</td><td>Close external geoid file</td><td>geoid.c</td><td></td></tr><tr><td>geoidh()</td><td>Geoid height</td><td>geoid.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Datum transformation</th></tr><tr><td>loaddatump()</td><td>Load datum transformation parameter</td><td>datum.c</td><td></td></tr><tr><td>tokyo2jgd()</td><td>Tokyo datum to JGD2000 datum</td><td>datum.c</td><td></td></tr><tr><td>jgd2tokyo()</td><td>JGD2000 datum to Tokyo datum</td><td>datum.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**RINEX functions**</th></tr><tr><td>readrnx()</td><td>Read RINEX file</td><td>rinex.c **</td><td></td></tr><tr><td>readrnxt()</td><td>Read RINEX file in time range/interval</td><td>rinex.c **</td><td></td></tr><tr><td>readrnxc()</td><td>Read RINEX clock file</td><td>rinex.c</td><td></td></tr><tr><td>outrnxobsh()</td><td>Output RINEX OBS header</td><td>rinex.c **</td><td></td></tr><tr><td>outrnxobsb()</td><td>Output RINEX OBS body</td><td>rinex.c</td><td></td></tr><tr><td>outrnxnavh()</td><td>Output RINEX NAV header</td><td>rinex.c</td><td></td></tr><tr><td>outrnxgnavh()</td><td>Output RINEX GLONASS NAV header</td><td>rinex.c</td><td></td></tr><tr><td>outrnxhnavh()</td><td>Output RINEX GEO NAV header</td><td>rinex.c</td><td></td></tr><tr><td>outrnxlnavh()</td><td>Output RINEX Galileo NAV header</td><td>rinex.c</td><td></td></tr><tr><td>outrnxqnavh()</td><td>Output RINEX QZSS NAV header</td><td>rinex.c</td><td></td></tr><tr><td>outrnxcnavh()</td><td>Output RINEX BeiDou NAV header</td><td>rinex.c *</td><td></td></tr><tr><td>outrnxnavb()</td><td>Output RINEX NAV body</td><td>rinex.c</td><td></td></tr><tr><td>outrnxgnavb()</td><td>Output RINEX GLONASS NAV body</td><td>rinex.c</td><td></td></tr><tr><td>outrnxhnavb()</td><td>Output RINEX GEO NAV body</td><td>rinex.c</td><td></td></tr><tr><td>uncompress()</td><td>Uncompress file</td><td>rinex.c</td><td></td></tr><tr><td>init_rnxctr()</td><td>Initialize RINEX control</td><td>rinex.c *</td><td></td></tr><tr><td>free_rnxctr()</td><td>Free RINEX contr</td><td>rinex.c *</td><td></td></tr><tr><td>open_rnxctr()</td><td>Open RINEX control</td><td>rinex.c *</td><td></td></tr><tr><td>input_rnxctr()</td><td>Input next RINEX data by RINEX control</td><td>rinex.c *</td><td></td></tr><tr><td>convrnx()</td><td>RINEX converter</td><td>convrnx.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Ephemeris functions**</th></tr><tr><td>eph2clk()</td><td>Broadcast ephemeris to satellite clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>geph2clk()</td><td>GLONASS ephemeris to satellite clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>seph2clk()</td><td>GEO ephemeris to satellite clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>eph2pos()</td><td>Broadcast ephemeris to satellite position/clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>geph2pos()</td><td>GLONASS ephemeris to satellite position/clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>seph2pos()</td><td>GEO ephemeris to satellite position/clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>peph2pos()</td><td>Precise ephemeris to satellite position/clock-bias</td><td>preceph.c</td><td></td></tr><tr><td>satantoff()</td><td>Satellite antenna phase center offset</td><td>ephemeris.c</td><td></td></tr><tr><td>satpos()</td><td>Satellite position/clock-bias</td><td>ephemeris.c</td><td></td></tr><tr><td>satposs()</td><td>Satellite positions/clock-biases</td><td>ephemeris.c</td><td></td></tr><tr><td>readsp3()</td><td>Read SP3 file</td><td>preceph.c **</td><td></td></tr><tr><td>readsap()</td><td>Read satellite antenna phase center parameters</td><td>preceph.c</td><td></td></tr><tr><td>readdcb()</td><td>Read DCB parameters</td><td>preceph.c</td><td></td></tr><tr><td>alm2pos()</td><td>Almanac to satellite position/clock-bias</td><td>preceph.c</td><td></td></tr><tr><td>tle_read()</td><td>Read TLE data file</td><td>tle.c *</td><td></td></tr><tr><td>tle_name_read()</td><td>Read TLE satellite name file</td><td>tle.c *</td><td></td></tr><tr><td>tle_pos()</td><td>Satellite position and velocity with TLE data</td><td>tle.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Receiver raw data functions**</th></tr><tr><td>getbitu()</td><td>Extract unsigned bits</td><td>rtkcmn.c</td><td></td></tr><tr><td>getbits()</td><td>Extract signed bits</td><td>rtkcmn.c</td><td></td></tr><tr><td>setbitu()</td><td>Set unsigned bits</td><td>rtkcmn.c</td><td></td></tr><tr><td>setbits()</td><td>Set signed bits</td><td>rtkcmn.c</td><td></td></tr><tr><td>crc32()</td><td>CRC32 parity</td><td>rtkcmn.c</td><td></td></tr><tr><td>crc24q()</td><td>CRC24Q parity</td><td>rtkcmn.c</td><td></td></tr><tr><td>crc16()</td><td>CRC16 parity</td><td>rtkcmn.c</td><td></td></tr><tr><td>decode_word()</td><td>Decode navigation data word</td><td>rcvraw.c</td><td></td></tr><tr><td>decode_frame()</td><td>Decode navigation data frame</td><td>rcvraw.c</td><td></td></tr><tr><td>init_raw()</td><td>Initialize receiver raw data control</td><td>rcvraw.c</td><td></td></tr><tr><td>free_raw()</td><td>Free receiver raw data control</td><td>rcvraw.c</td><td></td></tr><tr><td>input_raw()</td><td>Input receiver raw data from stream</td><td>rcvraw.c</td><td></td></tr><tr><td>input_rawf()</td><td>Input receiver raw data from file</td><td>rcvraw.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Receiver dependent functions**</th></tr><tr><td>input_oem4()</td><td>Input OEM4/V raw data from stream</td><td>rcv/novatel.c</td><td></td></tr><tr><td>input_oem3()</td><td>Input OEM3 raw data from stream</td><td>rcv/novatel.c</td><td></td></tr><tr><td>input_ubx()</td><td>Input u-blox raw data from stream</td><td>rcv/ublox.c</td><td></td></tr><tr><td>input_ss2()</td><td>Input Superstar II raw data from stream</td><td>rcv/ss2.c</td><td></td></tr><tr><td>input_cres()</td><td>Input Crescent raw data from stream</td><td>rcv/crescent.c</td><td></td></tr><tr><td>input_stq()</td><td>Input SkyTraq raw data from stream</td><td>rcv/skytraq.c</td><td></td></tr><tr><td>input_gw10()</td><td>Input Furuno GW-10-II/III raw data from stream</td><td>rcv/gw10.c</td><td></td></tr><tr><td>input_javad()</td><td>Input JAVAD GRIL/GREIS raw data from stream</td><td>rcv/javad.c</td><td></td></tr><tr><td>input_nvs()</td><td>Input NVS BINR raw data from stream</td><td>rcv/nvs.c *</td><td></td></tr><tr><td>input_binex()</td><td>Input BINEX data from stream</td><td>rcv/binex.c *</td><td></td></tr><tr><td>input_oem3f()</td><td>Input OEM3 raw data from file</td><td>rcv/novatel.c</td><td></td></tr><tr><td>input_oem4f()</td><td>Input OEM4/V raw data from file</td><td>rcv/novatel.c</td><td></td></tr><tr><td>input_ubxf()</td><td>Input u-blox raw data from file</td><td>rcv/ublox.c</td><td></td></tr><tr><td>input_ss2f()</td><td>Input Superstar II raw data from file</td><td>rcv/ss2.c</td><td></td></tr><tr><td>input_cresf()</td><td>Input Crescent raw data from file</td><td>rcv/crescent.c</td><td></td></tr><tr><td>input_stqf()</td><td>Input SkyTraq raw data from file</td><td>rcv/skytraq.c</td><td></td></tr><tr><td>input_gw10f()</td><td>Input Furuno GW-10-II/III raw data from file</td><td>rcv/gw10.c</td><td></td></tr><tr><td>input_javadf()</td><td>Input JAVAD GRIL/GREIS raw data from file</td><td>rcv/javad.c</td><td></td></tr><tr><td>input_nvsf()</td><td>Input NVS BINR raw data from file</td><td>rcv/nvs.c *</td><td></td></tr><tr><td>input_binexf()</td><td>Input BINEX data from file</td><td>rcv/binex.c *</td><td></td></tr><tr><td>gen_ubx()</td><td>Generate u-blox binary command</td><td>rcv/ublox.c</td><td></td></tr><tr><td>gen_stq()</td><td>Generate SkyTraq binary command</td><td>rcv/skytraq.c</td><td></td></tr><tr><td>gen_nvs()</td><td>Generate NVS BINR binary command</td><td>rcv/nvs.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**RTCM functions**</th></tr><tr><td>init_rtcm()</td><td>Initialize RTCM control</td><td>rtcm.c</td><td></td></tr><tr><td>free_rtcm()</td><td>Free RTCM control</td><td>rtcm.c</td><td></td></tr><tr><td>rtcm.c</td><td>Input RTCM 2 message from stream</td><td>rtcm.c</td><td></td></tr><tr><td>input_rtcm3()</td><td>Input RTCM 3 message from stream</td><td>rtcm.c</td><td></td></tr><tr><td>input_rtcm2f()</td><td>Input RTCM 2 message from file</td><td>rtcm.c</td><td></td></tr><tr><td>input_rtcm3f()</td><td>Input RTCM 3 message from file</td><td>rtcm.c</td><td></td></tr><tr><td>gen_rtcm2()</td><td>Generate RTCM 2 message</td><td>rtcm.c *</td><td></td></tr><tr><td>gen_rtcm3()</td><td>Generate RTCM 3 message</td><td>rtcm.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Solution functions**</th></tr><tr><td>initsolbuf()</td><td>Initialize solution buffer</td><td>solution.c</td><td></td></tr><tr><td>freesolbuf()</td><td>Free solution buffer</td><td>solution.c</td><td></td></tr><tr><td>getsol()</td><td>Get solution data from solution buffer</td><td>solution.c</td><td></td></tr><tr><td>addsol()</td><td>Add solution data to solution buffer</td><td>solution.c</td><td></td></tr><tr><td>readsol()</td><td>Read solution data from solutions files</td><td>solution.c</td><td></td></tr><tr><td>readsolt()</td><td>Read solution data in time range/interval</td><td>solution.c</td><td></td></tr><tr><td>readsolstat()</td><td>Read solution status from file</td><td>solution.c</td><td></td></tr><tr><td>readsolstatt()</td><td>Read solution status in time range/interval</td><td>solution.c</td><td></td></tr><tr><td>inputsol()</td><td>Input solution data from stream</td><td>solution.c</td><td></td></tr><tr><td>outprcopts()</td><td>Output processing options to string</td><td>solution.c</td><td></td></tr><tr><td>outsolheads()</td><td>Output solution header to string</td><td>solution.c</td><td></td></tr><tr><td>outsols()</td><td>Output solution body to string</td><td>solution.c</td><td></td></tr><tr><td>outsolexs()</td><td>Output extended solution to string</td><td>solution.c</td><td></td></tr><tr><td>outprcopt()</td><td>Output processing options to file</td><td>solution.c</td><td></td></tr><tr><td>outsolhead()</td><td>Output solution header to file</td><td>solution.c</td><td></td></tr><tr><td>outsol()</td><td>Output solution body to file</td><td>solution.c</td><td></td></tr><tr><td>outsolex()</td><td>Output extended solution to file</td><td>solution.c</td><td></td></tr><tr><td>outnmea_rmc()</td><td>Output NMEA GPRMC sentence</td><td>solution.c</td><td></td></tr><tr><td>outnmea_gga()</td><td>Output NMEA GPGGA sentence</td><td>solution.c</td><td></td></tr><tr><td>outnmea_gsa()</td><td>Output NMEA GPGSA, GLGSA, GAGSA sentences</td><td>solution.c</td><td></td></tr><tr><td>outnmea_gsv()</td><td>Output NMEA GPGSV, GLGSV, GAGSV sentences</td><td>solution.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Convert solutions to Google Earth KML file**</th></tr><tr><td>convkml()</td><td>Convert solutions to Google Earth KML file</td><td>convkml.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**SBAS functions**</th></tr><tr><td>sbsreadmsg()</td><td>Read SBAS message file</td><td>sbas.c</td><td></td></tr><tr><td>sbsreadsmgt()</td><td>Read SBAS message file in time range</td><td>sbas.c</td><td></td></tr><tr><td>sbsoutmsg()</td><td>Output SBAS messages</td><td>sbas.c</td><td></td></tr><tr><td>sbsdecodemsg()</td><td>Decode SBAS message</td><td>sbas.c</td><td></td></tr><tr><td>sbsupdatecorr()</td><td>Update SBAS corrections</td><td>sbas.c</td><td></td></tr><tr><td>sbssatcorr()</td><td>SBAS satellite correction</td><td>sbas.c</td><td></td></tr><tr><td>sbsioncorr()</td><td>SBAS ionospheric correction</td><td>sbas.c</td><td></td></tr><tr><td>sbstropcorr()</td><td>SBAS tropospheric correction</td><td>sbas.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Options functions**</th></tr><tr><td>searchopt()</td><td>Search option</td><td>options.c</td><td></td></tr><tr><td>str2opt()</td><td>String to option value</td><td>options.c</td><td></td></tr><tr><td>opt2str()</td><td>Option value to string</td><td>options.c</td><td></td></tr><tr><td>opt2buf()</td><td>Option to string</td><td>options.c</td><td></td></tr><tr><td>loadopts()</td><td>Load options from file</td><td>options.c</td><td></td></tr><tr><td>saveopts()</td><td>Save options to file</td><td>options.c</td><td></td></tr><tr><td>resetsysopts()</td><td>Reset system options to default</td><td>options.c</td><td></td></tr><tr><td>getsysopts()</td><td>Get system options</td><td>options.c</td><td></td></tr><tr><td>setsysopts()</td><td>Set system options</td><td>options.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Stream data input/output functions**</th></tr><tr><td>strinitcom()</td><td>Initialize stream communication environment</td><td>stream.c</td><td></td></tr><tr><td>strinit()</td><td>Initialize stream</td><td>stream.c</td><td></td></tr><tr><td>strlock()</td><td>Lock stream</td><td>stream.c</td><td></td></tr><tr><td>strunlock()</td><td>Unlock stream</td><td>stream.c</td><td></td></tr><tr><td>stropen()</td><td>Open stream</td><td>stream.c</td><td></td></tr><tr><td>strclose()</td><td>Close stream</td><td>stream.c</td><td></td></tr><tr><td>strread()</td><td>Read stream</td><td>stream.c</td><td></td></tr><tr><td>strwrite()</td><td>Write stream</td><td>stream.c</td><td></td></tr><tr><td>strsync()</td><td>Time sync stream</td><td>stream.c</td><td></td></tr><tr><td>strstat()</td><td>Get stream status</td><td>stream.c</td><td></td></tr><tr><td>strsum()</td><td>Get stream statistics summary</td><td>stream.c</td><td></td></tr><tr><td>strsetopt()</td><td>Set stream options</td><td>stream.c</td><td></td></tr><tr><td>strgettime()</td><td>Get current time from stream</td><td>stream.c</td><td></td></tr><tr><td>strsendnmea()</td><td>Send NMEA message to stream</td><td>stream.c</td><td></td></tr><tr><td>strsendcmd()</td><td>Send receiver command to stream</td><td>stream.c</td><td></td></tr><tr><td>strsettimeout()</td><td>Set stream timeout parameters</td><td>stream.c</td><td></td></tr><tr><td>strsetdir()</td><td>Set local directory</td><td>stream.c</td><td></td></tr><tr><td>strsetproxy()</td><td>Set proxy address</td><td>stream.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Integer ambiguity resolution**</th></tr><tr><td>lambda()</td><td>LAMBDA/MLAMBDA integer least-square estimation</td><td>lambda.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Standard positioning**</th></tr><tr><td>pntpos()</td><td>Standard positioning</td><td>pntpos.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Precise positionin**g</th></tr><tr><td>rtkinit()</td><td>Initialize RTK control struct</td><td>rtkpos.c</td><td></td></tr><tr><td>rtkfree()</td><td>Free RTK control struct</td><td>rtkpos.c</td><td></td></tr><tr><td>rtkpos()</td><td>Precise positioning</td><td>rtkpos.c</td><td></td></tr><tr><td>rtkopenstat()</td><td>Open solution status file</td><td>rtkpos.c</td><td></td></tr><tr><td>rtkclosestat()</td><td>Close solution status file</td><td>rtkpos.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Precise point positioning**</th></tr><tr><td>pppos()</td><td>Precise point positioning (PPP)</td><td>ppp.c *</td><td></td></tr><tr><td>pppnx()</td><td>Number of estimated states for PPP</td><td>ppp.c *</td><td></td></tr><tr><td>pppoutsolstat()</td><td>Output solution statistics for PPP</td><td>ppp.c *</td><td></td></tr><tr><td>windupcorr()</td><td>Phase windup correction</td><td>rtkcmn.c</td><td></td></tr><tr><td>pppamb()</td><td>Resolve integer ambiguity for PPP</td><td>ppp_ar.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Post-processing positioning**</th></tr><tr><td>postpos()</td><td>Post-processing positioning</td><td>postpos.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**Stream server functions**</th></tr><tr><td>strsvrinit()</td><td>Initialize stream server</td><td>streamsvr.c</td><td></td></tr><tr><td>strsvrstart()</td><td>Start stream server</td><td>streamsvr.c **</td><td></td></tr><tr><td>strsvrstop()</td><td>Stop stream server</td><td>streamsvr.c</td><td></td></tr><tr><td>strsvrstat()</td><td>Get stream server status</td><td>streamsvr.c</td><td></td></tr><tr><td>strconvnew()</td><td>Generate stream converter</td><td>streamsvr.c *</td><td></td></tr><tr><td>strconvfree()</td><td>Free stream converter</td><td>streamsvr.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**RTK server functions**</th></tr><tr><td>rtksvrinit()</td><td>Initialize RTK server</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrstart()</td><td>Start RTK server</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrstop()</td><td>Stop RTK server</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvropenstr()</td><td>Open output/log stream</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrclosestr()</td><td>Close output/log stream</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrlock()</td><td>Lock RTK server</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrunlock()</td><td>Unlock RTK server</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrostat()</td><td>Get RTK observation data status</td><td>rtksvr.c</td><td></td></tr><tr><td>rtksvrsstat()</td><td>Get RTK stream status</td><td>rtksvr.c</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**RTK server functions**</th></tr><tr><td>dl_readurls()</td><td>Read URL address list file of GNSS data</td><td>download.c *</td><td></td></tr><tr><td>dl_readstas()</td><td>Read station list file for download</td><td>download.c *</td><td></td></tr><tr><td>dl_exec()</td><td>Execute download of GNSS data</td><td>download.c *</td><td></td></tr><tr><td>dl_test()</td><td>Execute local file test of GNSS data</td><td>download.c *</td><td></td></tr><tr><th colspan="4" style="text-align:center;">**QZSS LEX functions**</th></tr><tr><td>lexupdatecorr()</td><td>Update LEX corrections</td><td>qzslex.c *</td><td></td></tr><tr><td>lexreadmsg()</td><td>Read LEX message log file</td><td>qzslex.c *</td><td></td></tr><tr><td>lexoutmsg()</td><td>Output LEX message log</td><td>qzslex.c *</td><td></td></tr><tr><td>lexconvbin()</td><td>Convert LEX binary to LEX message log</td><td>qzslex.c *</td><td></td></tr><tr><td>lexeph2pos()</td><td>LEX satellite ephemeris and clock correction</td><td>qzslex.c *</td><td></td></tr><tr><td>lexioncorr()</td><td>LEX ionosphere correction</td><td>qzslex.c *</td><td></td></tr></tbody></table>',5)]))}const g=d(s,[["render",n]]);export{u as __pageData,g as default};
