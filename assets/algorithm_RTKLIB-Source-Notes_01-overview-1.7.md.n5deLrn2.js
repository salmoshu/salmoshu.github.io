import{_ as d,c as i,a4 as r,j as t,a as o,G as n,w as s,B as Q,o as e}from"./chunks/framework.DKq7WeZY.js";const I=JSON.parse('{"title":"1. 初识RTKLIB","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/RTKLIB-Source-Notes/01-overview-1.7.md","filePath":"algorithm/RTKLIB-Source-Notes/01-overview-1.7.md"}'),g={name:"algorithm/RTKLIB-Source-Notes/01-overview-1.7.md"},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.566ex",height:"1.437ex",role:"img",focusable:"false",viewBox:"0 -441 3786 635","aria-hidden":"true"},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.428ex",height:"1.027ex",role:"img",focusable:"false",viewBox:"0 -443 1073 454","aria-hidden":"true"};function p(h,l,c,x,L,w){const a=Q("mjx-assistive-mml"),T=Q("mjx-container");return e(),i("div",null,[l[13]||(l[13]=r('<h1 id="_1-初识rtklib" tabindex="-1">1. 初识RTKLIB <a class="header-anchor" href="#_1-初识rtklib" aria-label="Permalink to &quot;1. 初识RTKLIB&quot;">​</a></h1><h2 id="_1-6-学习建议" tabindex="-1">1.6 学习建议 <a class="header-anchor" href="#_1-6-学习建议" aria-label="Permalink to &quot;1.6 学习建议&quot;">​</a></h2><h3 id="_1-6-1-软件包的使用" tabindex="-1">1.6.1 软件包的使用 <a class="header-anchor" href="#_1-6-1-软件包的使用" aria-label="Permalink to &quot;1.6.1 软件包的使用&quot;">​</a></h3><ul><li>看源码之前先学会使用GUI软件；</li><li>尝试编译并跑通CUI应用，以后处理程序作为切入点理解源码。</li></ul><h3 id="_1-6-2-解读源码的建议" tabindex="-1">1.6.2 解读源码的建议 <a class="header-anchor" href="#_1-6-2-解读源码的建议" aria-label="Permalink to &quot;1.6.2 解读源码的建议&quot;">​</a></h3><ul><li><strong>编程基础</strong>：RTKLIB主要以C语言编写，不过不需要特意学语法，稍微有点C语言基础即可，直接看代码，没见过的语法再查一下即可；</li><li><strong>问题导向</strong>：建议以问题为导向地梳理和学习RTKLIB，例如研究数据是如何传递的，滤波器是如何构建的，rinex/rtcm原始数据是如何解析并转换为obs_t/nav_t结构体的等等；</li><li><strong>避免完美主义</strong>：遇到看不懂的地方，先暂时跳过，可以先整体后局部；</li><li><strong>避免大而全</strong>。不建议以系统性大而全的方式整理RTKLIB源码，因为RTKLIB的代码量很大，而且代码的组织方式很晦涩，变量命名都是abc之类的名称，代码并没使用现代化的编程方式，很难一下子就看懂，笔者也是搞了两三年RTK以后才回头整理这些工作的；</li></ul><h3 id="_1-6-3-代码看不懂怎么办" tabindex="-1">1.6.3 代码看不懂怎么办 <a class="header-anchor" href="#_1-6-3-代码看不懂怎么办" aria-label="Permalink to &quot;1.6.3 代码看不懂怎么办&quot;">​</a></h3><ul><li><strong>巧用AI工具</strong>：如今大模型的能力日益强大，遇到RTKLIB代码难题时，将代码片段喂给AI，大多能得到相应的解释。</li><li><strong>善用网络资料</strong>：网上RTKLIB相关资料不少，几乎能对每一行代码给出详尽解读。建议先快速浏览相关博客，把博客中的注释和讲解复制到自己手头的代码里，后续阅读起来会顺畅许多。虽说博客内容大多较为随意、不够严谨，但有个参考总比毫无头绪要好。</li><li><strong>研读硕士论文</strong>：学习RTK相关知识，硕士论文是不错的选择，尤其适合学习短基线算法、模糊度固定等内容。尽管部分论文在写作上存在一定不足，但其中基础知识讲解细致，非常契合初学者的需求。相较于教材，论文更具针对性，主要围绕RTKLIB所用到的算法展开；相较于博客，论文也更为严谨，算法公式都经过仔细校验。</li><li><strong>精读特定论文</strong>：若要深入学习PPP算法，推荐阅读吉林大学周昌杰的硕士论文《基于RTKLIB的GNSS精密单点定位研究》。</li><li><strong>借助论文理解算法</strong>：RTKLIB中的算法，除模糊度固定外，理解起来难度不大。遇到未曾接触过的算法时，查找相关论文研读一番，往往就能豁然开朗。</li><li><strong>绘图辅助理解代码</strong>：RTKLIB代码量庞大，直接阅读容易让人一头雾水，复杂的代码逻辑也难以迅速掌握。不妨绘制流程图、函数调用关系图、思维导图等，辅助理解代码。绘图不仅能帮助梳理思路，绘制好的图日后还能作为复习资料使用。</li></ul><h3 id="_1-6-4-rtklib手册" tabindex="-1">1.6.4 RTKLIB手册 <a class="header-anchor" href="#_1-6-4-rtklib手册" aria-label="Permalink to &quot;1.6.4 RTKLIB手册&quot;">​</a></h3><ul><li>RTKLIB手册中文版：<a href="/algorithm/RTKLIB-Manual-CN/01-overview.html">RTKLIB-Manual-CN</a></li><li>RTKLIB手册比较详细，该手册介绍了RTKLIB包含的工具包的使用方法，然后介绍核心代码库定义的 API，最后还附加介绍了RTKLIB中所参考的算法模型；</li><li>附录 E 介绍了 RTKLIB 的模型和算法，可以对着公式重点多看几遍；</li></ul><h3 id="_1-6-5-学习顺序" tabindex="-1">1.6.5 学习顺序 <a class="header-anchor" href="#_1-6-5-学习顺序" aria-label="Permalink to &quot;1.6.5 学习顺序&quot;">​</a></h3><ul><li><strong>CUI程序的使用</strong>：了解CUI程序与界面程序的关系及学习方法。命令行功能的程序和界面程序功能基本对应。界面程序好用，命令行程序代码好读。可以通过界面程序学软件的用法，理解程序运行逻辑；然后再通过阅读命令行程序的源码，来更深入的理解；</li><li><strong>单历元解算起点</strong>：明确实时解算和后处理的单历元解算起始函数。无论是实时解算还是后处理，都是从 <code>rtkpos()</code> 函数开始进行单历元解算；</li><li><strong>后处理学习路径</strong>：掌握后处理的学习顺序和方法。学的时候先从后处理开始，先看 postpos 的用法（使用GUI应用），然后顺着 rnx2rtkp 的源码（解读CUI程序），梳理从读取 RINEX 文件到定位解算与输出的整个过程；</li><li><strong>初始学习重点</strong>：明确刚开始学习时的关注点。大部分内容，刚开始看的时候不用太关注内部具体实现，知道原理就好。知道数据存到什么类型里，在哪个函数计算，传入什么数据，计算得到什么数据，就行了。</li></ul><h3 id="_1-6-6-算法学习顺序" tabindex="-1">1.6.6 算法学习顺序 <a class="header-anchor" href="#_1-6-6-算法学习顺序" aria-label="Permalink to &quot;1.6.6 算法学习顺序&quot;">​</a></h3><p>算法学习还是建议<strong>以问题为导向</strong>，寻找到自己的关注点，而非全盘通吃。不过如果一定要系统性地研究可以按照如下顺序：</p>',14)),t("ul",null,[l[10]||(l[10]=r("<li><strong>矩阵运算</strong>：矩阵都是用一维 double 数组表示、列优先，要熟练掌握矩阵的加减乘除转置求逆，还要会 <code>matprint()</code> 输出矩阵用于调试，比如你想看程序运行过程中某个矩阵的值，断点调试直接看肯定不行，矩阵都是指针，得用 <code>matprint()</code> 输出；</li><li><strong>参数估计</strong>：把最小二乘、卡尔曼滤波的四个函数看明白；后处理的时候有前向滤波、反向滤波、正反向结合三种滤波方式，体现在代码上就是有个标记标志前后，取数据的顺序不同；</li><li><strong>时间系统</strong>：知道基本概念（GPS 时、UTC、周内秒、跳秒、儒略日），理解 <code>gtime_t</code> 类型，会用操作 <code>gtime_t</code> 的函数，比如算时间差、比较时间先后、输出时间字符串、输出当前北京时间字符串、转周内秒；</li><li><strong>坐标系统</strong>：矩阵用三维向量表示，要了解 ECEF（XYZ）、LLH（纬经高）、ENU（东北天）的用途、转换函数（包括坐标转换、协方差转换），其中： <ul><li>ECEF 是直角坐标系，列观测方程计算方便，在 RTKLIB 中一般用 r 表示；</li><li>LLH 反映了测站在地球椭球上的位置，在 RTKLIB 中一般用 pos 表示；</li><li>ENU 是站心坐标系，是以测站为原点建立的直角坐标系，方便表示相对关系（卫星相对接收机、流动站相对于基准站），比如计算方位角高度角，视线向量；ENU 表示东北天，生活中常用，比如导航软件告诉你“向东行驶200米左转”；ENU 坐标系都是以某一个 LLH，这个原点 LLH 必须存下来，ENU 才有意义，ENU 转 ECEF、LLH 的时候需要有坐标原点的 LLH。</li></ul></li><li><strong>卫星系统定义</strong>：算的时候得知道观测值是哪个卫星系统的，有两套表示方法： <ul><li>表示卫星系统的字母：GRECJIS；</li><li>或者 7 位二进制码 SYS_xxx，对应位写 1 表示有对应的系统，做或算可加系统，做与运算判断有无系统；</li></ul></li><li><strong>卫星定义</strong>：解算的时候需要知道观测值是哪颗卫星的，也有两套表示方法： <ul><li>可以表示为各系统的卫星 ID（系统缩写+PRN）：B02、C21；直观且含义明确，但不好处理；</li><li>也可表示为连续的整型数字 satellite number，好处理，方便遍历；</li></ul></li><li><strong>观测量定义</strong>：<strong>C</strong>：伪距、<strong>D</strong>：多普勒、<strong>L</strong>：载波相位、<strong>S</strong>：载噪比；<code>CODE_XXX</code>：观测值类型定义，用一串连续的数字表示；</li><li><strong>配置选项</strong>：主要是三个结构体：<code>prcopt_t</code> 存处理选项、<code>filopt_t</code> 存文件路径、<code>solopt_t</code> 存结果输出格式；默认处理选项、结果选项要理解，常用的处理选项要记住；</li><li><strong>后处理解算大致流程</strong>：结合流程图把 rnx2rtkp、postpos、procpos、rtkpos 看明白，知道配置存到哪、数据存到哪、结果存到哪、哪个函数把数据读进来、SPP/RTK/PPP 分别在哪些函数进行、前向滤波/后向滤波区别；</li><li><strong>RINEX读取</strong>：不用太细看，对数据格式有个基本的认识，知道读进来的数据以什么形式，存到什么变量里就行；</li><li><strong>Trace 输出</strong>：知道怎么打开和关闭 Trace 输出、设置 Trace 等级，出了问题能根据 Trace 输出定位到出错位置、看明白出错原因；</li><li><strong>结果输出</strong>：有两套，一套是输出定位结果，包括位置速度钟差以及它们的协方差等，存在 <code>sol_t</code>、<code>solbuf_t</code> 中，由 <code>outsol()</code> 函数输出；一套输出解算中间结果，包括高度角方位角残差等，存在 <code>solstat_t</code>、<code>solstatbuf_t</code> 中，由 <code>outsolstat()</code> 输出；</li><li><strong>卫星位置计算</strong>：精密星历和广播星历都是读文件套公式计算，对照着代码看一遍文件格式和公式，有点点印象，知道 BDS、GLONASS 和其它系统计算的区别就可以；</li>",13)),t("li",null,[l[2]||(l[2]=t("strong",null,"卫星钟差计算",-1)),l[3]||(l[3]=o("：用广播星历里的 ")),n(T,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:s(()=>[(e(),i("svg",m,l[0]||(l[0]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"msub"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D44E",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(562,-150) scale(0.707)"},[t("path",{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",style:{"stroke-width":"3"}})])]),t("g",{"data-mml-node":"mo",transform:"translate(965.6,0)"},[t("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"msub",transform:"translate(1410.2,0)"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D44E",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(562,-150) scale(0.707)"},[t("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})])]),t("g",{"data-mml-node":"mo",transform:"translate(2375.8,0)"},[t("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"msub",transform:"translate(2820.4,0)"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D44E",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(562,-150) scale(0.707)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})])])])],-1)]))),n(a,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:s(()=>l[1]||(l[1]=[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"a"),t("mn",null,"0")]),t("mo",null,","),t("msub",null,[t("mi",null,"a"),t("mn",null,"1")]),t("mo",null,","),t("msub",null,[t("mi",null,"a"),t("mn",null,"2")])],-1)])),_:1})]),_:1}),l[4]||(l[4]=o(" 二次函数拟合系数算，迭代三次，要做群波延迟校正、相对论效应改正；"))]),l[11]||(l[11]=r("<li><strong>电离层改正</strong>：当信号通过电离层时，传播速度和传播路径会发生改变，带来电离层延迟；大小与电子密度成正比，对载波和伪距影响相反，不同信号频率延迟不同，影响可达数十米； <ul><li><strong>克罗布歇模型电离层改正</strong>；</li><li><strong>电离层 INOEX 文件</strong>；</li><li><strong>估计电离层 STEC</strong>；</li></ul></li><li><strong>对流层改正</strong>：信号穿过对流层时，由于传播介质密度的增加，信号传播路径和传播速度会发生改变，带来对流层延迟。与频率无关，对载波和伪距影响相同。对流层延迟一般可分为干延迟和湿延迟，对于载波相位和伪距完全相同，一般在米级大小； <ul><li><strong>Saastamoninen 模型</strong>：对流层分为两层进行积分，一层温度视为常数、一层温度有变化，然后按照天顶距三角函数展开逐项进行积分, 并把对流层天顶延迟分为对流层干延迟和湿延迟两个分量之和；</li><li><strong>标准大气模型</strong>：根据经验模型计算求大气压 P、温度 T、大气水汽压力 e；</li><li><strong>GPT 模型</strong>：GPT 模型的气压温度算的准一点，利用欧洲中尺度天气预报中心 长期的再分析气象资料建立的全球气象参数经验模型, 仅需知道测站地理位置信息与年积日便可以获得地表温度、大气压力和水汽压等气象参数；</li><li><strong>估计对流层 ZTD</strong>；</li></ul></li><li><strong>天线相位改正</strong>：包括卫星端和接收机端、PCO 和 PCV，GNSS 观测量是卫星和接收机天线相位之间的，而不是几何中心，需要转到几何中心，常通过 igs14.atx 文件来改正。不研究这个方向，就不用太细看；</li><li><strong>天线相位缠绕</strong>；</li>",4)),t("li",null,[l[7]||(l[7]=t("strong",null,"地球自转改正",-1)),l[8]||(l[8]=o("：也称 Sagnac 效应改正，卫星信号到达地球时 ECEF 坐标系会绕地球时转动 ")),n(T,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:s(()=>[(e(),i("svg",u,l[5]||(l[5]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D714",d:"M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(622,0)"},[t("path",{"data-c":"1D45F",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),n(a,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:s(()=>l[6]||(l[6]=[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"ω"),t("mi",null,"r")],-1)])),_:1})]),_:1}),l[9]||(l[9]=o("，计算卫星与接收机间的几何距离时需要套公式改正；"))]),l[12]||(l[12]=r("<li><strong>潮汐改正</strong>：地球并非刚体，会在日月引力、地球负荷作用下产生周期性形变，分为固体潮、极潮、海洋潮，改正的时候先算日月坐标，然后套公式计算；</li><li><strong>观测值排除</strong>：星历缺失、高度角、信噪比、人为排除卫星、URA；</li><li><strong>差分码偏差 DCB</strong>：GPS 广播星历是相对 P 码而言，而我们普通用户定位解算的时候用 C/A 码，需要通过 DCB 文件中的参数或者广播星历中的 TGD 来把测量的伪距归化到 P 码。BDS、GLONASS、Galileo 也类似；</li><li><strong>单频单系统伪距单点定位</strong>：高度角方位角、卫地视线向量、近似距离计算，设计矩阵 H、新息向量 V 的构建，量测协方差阵 var；</li><li><strong>多系统</strong>：多系统涉及到系统间偏差 ISB，以系统间时间偏差为主，还包括硬件延迟，每多一个系统，就要多估计一个相对于 GPS 的 ISB，增广参数向量和设计矩阵；</li><li><strong>DOP 值计算</strong>：反映卫星的几何分布；</li><li><strong>RAIM-FDE</strong>：定位解算迭代若干次之后，残差仍然过大，认为定位解算发射，剔除残差最大的卫星观测值再进行解算，不断重复这个过程，知道解算成功，或者卫星数量过少不足以解算；</li><li><strong>多频</strong>：多频涉及到频间偏差 IFB；由于 GLONASS 信号频分多址调制，同频还存在频间偏差；</li><li><strong>周跳检测</strong>：RTKLIB 实现了两套周跳检测 LLI 和 GF，检测到周跳要重置模糊度估计参数，没做周跳修复；</li><li><strong>差分定位</strong>；</li><li><strong>模糊度固定</strong>；</li><li><strong>浮点解 PPP</strong>：理清楚改正了哪些误差，用了哪些文件，估计了哪些参数，参数的排列顺序，每种参数建立什么随机模型，初始噪声过程噪声怎么设置，出现什么情况要重置参数；</li><li><strong>实时解算流程</strong>：顺着 rtkrcv 的主函数往下看，算法和后处理没啥区别，数据读取；</li><li><strong>数据流</strong>：包括串口、文件、Ntrip、TCP、UDP 等；</li><li><strong>RTCM、RAW 读取</strong>：简单了解数据格式，知道每种语句都有什么数据，用什么函数能读取到什么类型的哪个变量中；</li><li><strong>SBAS 改正</strong>；</li><li><strong>SSR 改正</strong>；</li>",17))]),l[14]||(l[14]=t("h3",{id:"_1-6-7-总结",tabindex:"-1"},[o("1.6.7 总结 "),t("a",{class:"header-anchor",href:"#_1-6-7-总结","aria-label":'Permalink to "1.6.7 总结"'},"​")],-1)),l[15]||(l[15]=t("ul",null,[t("li",null,"矩阵运算、参数估计、时间系统、坐标系统、卫星和观测值的表示，是基础，要熟练掌握。"),t("li",null,"结果输出、Trace 输出、Rinex 和各种其它文件的读取，知道文件格式，知道大概哪个函数就行，基本不需要细致了解。"),t("li",null,"后处理流程要有印象，重点关注定位方程，H、V、R 矩阵的构建。了解模型改正原理，比如对流层、电离层、天线、潮汐、地球自转、引力延迟。"),t("li",null,"偏差的处理也算是重点，DCB、FCB、ISB、IFB，要算多系统多频，肯定得考虑。")],-1))])}const f=d(g,[["render",p]]);export{I as __pageData,f as default};
