import{_ as s,c as a,a0 as e,o as i}from"./chunks/framework.CMtr6uOw.js";const m=JSON.parse('{"title":"5. 代价最小化","description":"","frontmatter":{"sidebarDepth":2},"headers":[],"relativePath":"algorithm/MobileGNSS-SPP/05-mincost.md","filePath":"algorithm/MobileGNSS-SPP/05-mincost.md"}'),o={name:"algorithm/MobileGNSS-SPP/05-mincost.md"};function p(n,t,r,l,c,h){return i(),a("div",null,t[0]||(t[0]=[e('<h1 id="_5-代价最小化" tabindex="-1">5. 代价最小化 <a class="header-anchor" href="#_5-代价最小化" aria-label="Permalink to &quot;5. 代价最小化&quot;">​</a></h1><p>代价最小化方法是一个基于二次规划（Quadratic Programming, QP）的优化方法[07]，用于对位置和速度数据进行平滑和校正，该方法主要用于后处理。</p><p>该方法的目标是通过最小化一个二次代价函数，结合运动学约束和状态数据（位置、速度等），得到平滑且物理上合理的状态估计（位置、速度、加速度）。其核心是利用二次规划求解器（qpsolver）来优化状态向量。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_ekf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_optimized_pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(utc, x_ekf, v_ekf)</span></span></code></pre></div><p>具体内容参考项目中python/mincost，调用该部分的代码请解注释scores.py或scores_batch.py中get_optimized_pos函数调用。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-174327.jpg" alt=""></p>',6)]))}const g=s(o,[["render",p]]);export{m as __pageData,g as default};
