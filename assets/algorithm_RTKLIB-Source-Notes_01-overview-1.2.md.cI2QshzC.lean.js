import{_ as r,c as o,a4 as e,o as i}from"./chunks/framework.DKq7WeZY.js";const u=JSON.parse('{"title":"1. 初识RTKLIB","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/RTKLIB-Source-Notes/01-overview-1.2.md","filePath":"algorithm/RTKLIB-Source-Notes/01-overview-1.2.md"}'),a={name:"algorithm/RTKLIB-Source-Notes/01-overview-1.2.md"};function n(l,t,s,g,d,p){return i(),o("div",null,t[0]||(t[0]=[e('<h1 id="_1-初识rtklib" tabindex="-1">1. 初识RTKLIB <a class="header-anchor" href="#_1-初识rtklib" aria-label="Permalink to &quot;1. 初识RTKLIB&quot;">​</a></h1><h2 id="_1-2-基本使用" tabindex="-1">1.2 基本使用 <a class="header-anchor" href="#_1-2-基本使用" aria-label="Permalink to &quot;1.2 基本使用&quot;">​</a></h2><h3 id="_1-2-1-下载-rtklib" tabindex="-1">1.2.1 下载 RTKLIB <a class="header-anchor" href="#_1-2-1-下载-rtklib" aria-label="Permalink to &quot;1.2.1 下载 RTKLIB&quot;">​</a></h3><p>以下为当前的版本汇总（截至2025年7月7日）：</p><p style="text-align:center;font-family:&#39;Microsoft YaHei&#39;, SimSun, Arial, sans-serif;font-size:14px;">表1-1 RTKLIB 主要版本汇总</p><table tabindex="0"><thead><tr><th>版本</th><th>日期</th><th>可执行 Windows 版本</th><th>源码</th><th>备注</th></tr></thead><tbody><tr><td>2.4.2 p13</td><td>2018/01/29</td><td><a href="https://github.com/tomojitakasu/RTKLIB_bin" target="_blank" rel="noreferrer">GitHub</a></td><td><a href="https://github.com/tomojitakasu/RTKLIB" target="_blank" rel="noreferrer">GitHub</a></td><td>官方版本2.4.2</td></tr><tr><td>2.4.3 b34</td><td>2020/12/29</td><td><a href="https://github.com/tomojitakasu/RTKLIB_bin/tree/rtklib_2.4.3" target="_blank" rel="noreferrer">GitHub</a></td><td><a href="https://github.com/tomojitakasu/RTKLIB/tree/rtklib_2.4.3" target="_blank" rel="noreferrer">GitHub</a></td><td>官方版本2.4.3</td></tr><tr><td>demo5-b34?</td><td>持续更新</td><td><a href="https://github.com/rtklibexplorer/RTKLIB/releases" target="_blank" rel="noreferrer">Github</a></td><td><a href="https://github.com/rtklibexplorer/RTKLIB/releases" target="_blank" rel="noreferrer">GitHub</a></td><td>基于2.4.3，面向低成本接收机优化</td></tr><tr><td>rtklib-py</td><td>2022/07/20</td><td>-</td><td><a href="https://github.com/rtklibexplorer/rtklib-py" target="_blank" rel="noreferrer">GitHub</a></td><td>Python版本</td></tr></tbody></table><p><strong>建议下载demo5版本</strong>，因为它继承了2.4.3版本的功能，但包含更多优化项，有更多值得学习的地方，并且它的主要框架与2.4.3相差不大。通过绿色按钮 <strong>Code</strong> 的下拉菜单，再点击 <strong>Download ZIP</strong> 可以下载目标文件：</p><p><img src="https://pic-bed-1316053657.cos.ap-nanjing.myqcloud.com/img/image-20231016092003733.png" alt="image-20231016092003733"></p><p style="text-align:center;font-family:&#39;Microsoft YaHei&#39;, SimSun, Arial, sans-serif;font-size:14px;">图1-3 RTKLIB 源码下载</p><p>解压两个压缩文件，得到的文件目录如下：</p><p><img src="https://pic-bed-1316053657.cos.ap-nanjing.myqcloud.com/img/image-20231026103732552.png" alt="image-20231026103732552"></p><p style="text-align:center;font-family:&#39;Microsoft YaHei&#39;, SimSun, Arial, sans-serif;font-size:14px;">图1-4 RTKLIB 文件目录</p><p><strong>Source Programs and Data</strong> 是程序的源文件，<strong>Binary APs for Windows</strong> 是编译好的 Windows 可执行文件，可以移至于 <strong>Source Programs and Data</strong> 的 bin 目录下以方便查找。对于经常使用的应用，例如用于原始数据和结果数据绘图的 <strong>rtkplot</strong> ，建议创建桌面快捷方式。</p><h3 id="_1-2-2-基本使用" tabindex="-1">1.2.2 基本使用 <a class="header-anchor" href="#_1-2-2-基本使用" aria-label="Permalink to &quot;1.2.2 基本使用&quot;">​</a></h3><p><strong>使用 RTKLIB 实现 GNSS 数据处理与定位解算</strong>。如果你拥有自己的 GNSS 模块和天线，可以通过串口或网口将其连接到电脑或树莓派，然后将 RTKLIB 部署其中作为数据处理与定位解算的工具。以下是 RTKLIB 的主要功能和操作步骤：</p><p><strong>1. 实时定位解算</strong></p><ul><li><strong>单点定位（SPP）</strong>：使用 RTKNAVI 或 RTKRCV 进行实时单点定位，精度可达米级。</li><li><strong>差分定位（RTK）</strong>：接入差分数据（如自建基准站或使用 CORS 服务）可显著提高精度，实现厘米级定位。</li><li><strong>PPP（精密单点定位）</strong>：提前下载精密改正文件（如 IGS 提供的 SSR 数据），并通过 RTKLIB 实现实时 PPP 解算。</li></ul><p><strong>2. 数据传输与存储</strong></p><ul><li><strong>数据记录</strong>：在实时解算过程中，可通过 LOG 功能记录数据流，便于后续分析；或者直接使用 STRSVR 或 STR2STR 将数据存储到本地文件。</li><li><strong>远程传输</strong>：通过 Ntrip 或 TCP Server将数据广播出去，支持远端解算。</li><li><strong>基准站搭建</strong>：可以将数据作为 Ntrip 数据源挂载到 NtripCaster，搭建自己的基准站。</li></ul><p><strong>3. 数据准备</strong></p><ul><li><strong>星历文件下载</strong>：如果手头只有观测数据（伪距、载波相位、多普勒和C/N0），那么还需要下载星历文件。可以通过 RTKGET 自动下载，或手动从 IGS 网站（如 <a href="ftp://igs.gnsswhu.cn/pub/gps/" target="_blank" rel="noreferrer">武汉大学 IGS 中心</a>）获取。</li><li><strong>PPP 改正文件下载</strong>：进行 PPP 解算时，需下载精密改正文件（如 IGS 提供的 SSR 数据）。</li></ul><blockquote><p>星历的下载，笔者喜欢使用MGEX-AGNSS服务，可以参考<a href="/algorithm/RTKLIB-Source-Notes/14-appendixA.html#a-3-mgex-agnss服务">附录A.3</a>。</p></blockquote><p><strong>4. 后处理分析</strong></p><p>当实时解算效果不理想，或是需要更高精度的结果时，可借助后处理分析来对数据或算法进行研究：</p><ul><li><strong>数据格式转换</strong>：接收机采集的原始数据通常为 RTCM 或其他二进制格式，可通过 CONVBIN 或 RTKCONV 将其转换为 RINEX 格式，便于后处理。</li><li><strong>后处理解算工具</strong>： <ul><li><strong>RTKPOST</strong>：图形界面程序，方便设置解算参数并导出配置文件，适合处理单个数据文件。</li><li><strong>RNX2RTKP</strong>：命令行程序，适合批量处理。可通过配置文件设置解算参数，支持脚本自动化。</li><li><strong>自定义后处理脚本</strong>：如果希望同时运行多组配置或多组数据，可以编写自定义脚本，这里提供笔者编写的一个示例程序，具体参考<a href="/algorithm/RTKLIB-Source-Notes/14-appendixA.html#a-4-批处理程序">附录A.4</a>。</li></ul></li><li><strong>输出文件分析</strong>： <ul><li><strong>结果文件（Solution）</strong>：包含定位和速度结果，支持 NMEA 或 RTKLIB 自定义格式。</li><li><strong>解算中间结果文件（Solution Status）</strong>：记录解算过程中的中间结果，如卫星残差、高度角、模糊度、对流层延迟等。</li><li><strong>调试文件（Trace）</strong>：用于辅助调试，记录程序执行过程中的错误、警告等信息。Trace 级别分为 1-5 级，其中： <ul><li><strong>1 级</strong>：致命错误，程序无法继续执行。</li><li><strong>2 级</strong>：警告，程序可能继续执行但可能无法解算。</li><li><strong>3 级</strong>：程序主要执行流程。</li><li><strong>4 级</strong>：更详细的执行流程。</li><li><strong>5 级</strong>：解算的详细中间过程。</li></ul></li></ul></li><li><strong>数据质量分析</strong>：使用 RTKPLOT 分析原始数据质量，包括卫星数量、观测值连续性、卫星几何分布（天空图）、信噪比等。</li><li><strong>问题排查</strong>： <ul><li>如果解算失败，可将 Trace 级别设为 2，查看错误或警告信息，检查文件路径、数据格式或解算参数设置；</li><li>如果是算法问题，可以先将 Trace 级别设为 3；</li><li>如果结果精度不达标，可分析解算中间结果文件（Solution Status），通过 RTKPLOT 作图优化解算参数。</li></ul></li></ul>',25)]))}const c=r(a,[["render",n]]);export{u as __pageData,c as default};
