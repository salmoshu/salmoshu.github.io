import{_ as a,c as h,a6 as n,G as p,B as t,o as k}from"./chunks/framework.B5S16sG3.js";const F=JSON.parse('{"title":"13. RTKLIB工程优化","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/RTKLIB-Source-Notes/13-optimization.md","filePath":"algorithm/RTKLIB-Source-Notes/13-optimization.md"}'),l={name:"algorithm/RTKLIB-Source-Notes/13-optimization.md"};function e(r,s,E,d,g,y){const i=t("GiscusTalk");return k(),h("div",null,[s[0]||(s[0]=n(`<h1 id="_13-rtklib工程优化" tabindex="-1">13. RTKLIB工程优化 <a class="header-anchor" href="#_13-rtklib工程优化" aria-label="Permalink to &quot;13. RTKLIB工程优化&quot;">​</a></h1><h2 id="_13-1-数据处理" tabindex="-1">13.1 数据处理 <a class="header-anchor" href="#_13-1-数据处理" aria-label="Permalink to &quot;13.1 数据处理&quot;">​</a></h2><h3 id="_13-1-1-北斗频点调整" tabindex="-1">13.1.1 北斗频点调整 <a class="header-anchor" href="#_13-1-1-北斗频点调整" aria-label="Permalink to &quot;13.1.1 北斗频点调整&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250707-234824.jpg" alt=""></p><p>现在将B1I/B3I/B2a作为北斗的三个频点，而不考虑北斗3的B1C信号与北斗2的B2I信号。该调整能更方便地使用北斗3代的B2a信号（作为L5信号），该组合在双频L1/L5的情况下表现更好，另外该调整在RTKLIB Demo5的b34k版本中也得到了更新，对应实现的代码参考附录A.1。</p><p>另外RTK的滤波算法中没有使用QZSS和GLO，没使用QZSS是因为卫星太少，而GLO则是因为国内没有差分数据。</p><h2 id="_13-2-单点定位" tabindex="-1">13.2 单点定位 <a class="header-anchor" href="#_13-2-单点定位" aria-label="Permalink to &quot;13.2 单点定位&quot;">​</a></h2><p>由于最小二乘较为简单，能比较方便和快速地对一些方法进行验证，因此初始时我将利用最小二乘进行一些基础的优化。这部分的优化可以参考项目：<a href="/algorithm/MobileGNSS-SPP/">MobileGNSS-SPP</a></p><h3 id="_13-2-1-加权模型" tabindex="-1">13.2.1 加权模型 <a class="header-anchor" href="#_13-2-1-加权模型" aria-label="Permalink to &quot;13.2.1 加权模型&quot;">​</a></h3><p><strong>1. RTKLIB中的BUG</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-170931.jpg" alt=""></p><p>demo5-b34k版本的RTKLIB在打开SNR加权后轨迹会崩溃，不过这并不是因为SNR加权效果不如等权，这里显然是错误，而非误差。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171041.jpg" alt=""></p><p>将ssat[i]改成ssat[sat-1]即可解决，打开SNR加权将提升定位性能。</p><p><strong>2. 仰角与SNR加权</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171252.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171332.jpg" alt=""></p><p>以上为使用SNR加权模型WLS在不同场景上的表现，目前由于代码中没有抗差，因此最大漂移指标都比较大。</p><p>基于卫星仰角的GNSS观测模型更适用于专用接收机。然而，对于智能手机，基于信号强度（载噪比，C/N0）的模型比依赖仰角的模型更能有效地处理观测权重[4,5,6]。因为智能手机观测误差往往由信号质量问题主导，而非大气误差，而使用仰角加权观测的动机正是为了解决大气误差</p><h3 id="_13-2-2-速度估计中的加权" tabindex="-1">13.2.2 速度估计中的加权 <a class="header-anchor" href="#_13-2-2-速度估计中的加权" aria-label="Permalink to &quot;13.2.2 速度估计中的加权&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171434.jpg" alt=""></p><p>RTKLIB中的速度估计原本几乎没有进行加权，其表现的性能如图13-4所示，基本和等权差不多。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CLIGHT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> freq;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[nv] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sig);</span></span></code></pre></div><p>原本加权方法的代码如上所示，其中的<code>err</code>由<code>stats-errdoppler</code>参数来控制。我在<code>resdop</code>中增加了新的加权方法，这里可以直接将伪距中的加权方法拷贝过来，并将原本的加权代码注释掉。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// resdop内部</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prcopt_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opt_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opt_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opt, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prcopt_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt_.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eratio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // doppler/phase error ratio</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ssat)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[nv]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varerr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opt_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ssat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i].sat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i],</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">azel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],sys);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[nv]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varerr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opt_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i],</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">azel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],sys);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 权的调节（修改H和v）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nv;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sig;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sig;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>具体的，需要在resdop中增加var计算的代码，随后在resdop调用的地方进行加权操作。其中的<code>opt_.eratio[0]</code>表示<code>stats-eratio1</code>参数，它原本代表L1频点伪距误差相对于载波相位的缩放因子，因为varerr内部的模型是针对载波相位的。这里我拷贝了一份<code>opt_</code>，并以其中的<code>opt_.eratio</code>表示多普勒相对于载波相位的缩放因子，需要注意的是由于不再使用原本的加权方式，这就意味着<code>stats-errdoppler</code>参数将不再生效。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171648.jpg" alt=""></p><p>可以看到速度的误差水平有所降低。</p><h3 id="_13-2-3-m估计-抗差估计" tabindex="-1">13.2.3 M估计（抗差估计） <a class="header-anchor" href="#_13-2-3-m估计-抗差估计" aria-label="Permalink to &quot;13.2.3 M估计（抗差估计）&quot;">​</a></h3><p><strong>1. 原理与实现</strong></p><p>M估计是一种广义的最大似然估计方法，旨在最小化一个目标函数，该函数对异常值不敏感。其核心思想是通过定义一个损失函数（或称为目标函数）来替代最小二乘法中的平方损失。</p><p>如果换一个角度来看M估计，可以认为它是一种更可靠的加权模型，该加权模型还利用到了验前残差（或新息），验前残差反映了预测与观测之间的差距，差距越小则给观测更大的权重，反之则给观测更小的权重。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171756.jpg" alt=""></p><p>M估计的数学表达如上所示。M估计的损失函数（或目标函数）通常包括Huber、IGG3和Tukey模型等，这里我主要关注其中的Huber和IGG3模型。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RobustLsq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>以上为实现M估计的C语言代码，需要注意：</p><ul><li>迭代流程。迭代最小二乘，先计算权，再更新H和v；</li><li>dx初值。初始的时候需要将dx赋值为0，不然结果可能会出现毛刺，本质是增加了迭代次数，以及位置首次迭代会除以残差本身。</li></ul><p><strong>2. 调参经验</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-171923.jpg" alt=""></p><p>当前使用的Huber模型作为损失函数，位置抗差和速度抗差k的最佳取值是不同的，Huber模型中k默认为1.345，该取值对位置估计有效，但速度估计则需取值为5.0，k的取值更多的还是取决于测试数据所表现的残差水平，一般多试几次即可知道最佳取值。</p><p>当前场景中，IGG3模型没有很好用，尤其是IGG3的第三段，会导致一些残差较大但能正常运算的卫星失去作用，致使参与卫星过少，这主要是因为芯片中伪距中存在频繁的钟跳（参考2.5.2节）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 位置钟跳的粗略剔除</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AdjustClkJump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nv, H, x, v);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* median inner system as receiver clock */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 速度钟跳的粗略剔除</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> med </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemianResOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, nv, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nv; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> med;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> med;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果一定要使用IGG3模型的话，可以在使用前对所有残差数据扣除一个残差中位数（粗略代表钟跳），这样避免IGG3第三段操作时踢掉过多卫星；而Huber模型不需要扣除则是因为Huber不会剔除卫星，而迭代过程中则会消除钟跳误差。Huber等损失函数模型的实现请参考RobustWeightLsq，这里我是按照计算权值的方式对其进行定义的。</p><p>这里的Huber模型和IGG3模型的处理如下：</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-172043.jpg" alt=""></p><p>可以发现位置估计与速度估计时需要设置不同的参数，而IGG3模型由于面对的是整体残差较大的数据，因此k2需要设置得比一般情况更大的数值。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROBUST_POS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROBUST_VEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>损失函数内部需要对残差较大的数据进行截断处理，即返回一个接近0的权值，另外不同算法的残差水平是不同的，需要设置不同的阈值（例如EKF中相应的部分需要设置为30、2）。</p><p><strong>3. 测试结果</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-172228.jpg" alt=""></p><p>由上表可看到抗差最小二乘比单纯的SNR加权效果要很多。另外Huber的平均水平相较IGG3更好，而IGG3不会像Huber那样容易出现较大的异常偏差。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-172325.jpg" alt=""><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-172427.jpg" alt=""><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250616-172501.jpg" alt=""></p><p style="text-align:center;">图13-8 SNR加权与Huber抗差对比（02-street/data01）</p><p>以02-street/data01组别数据为例，抗差后的结果所表现的性能提升了很多。</p><h2 id="_13-3-滤波器" tabindex="-1">13.3 滤波器 <a class="header-anchor" href="#_13-3-滤波器" aria-label="Permalink to &quot;13.3 滤波器&quot;">​</a></h2><h3 id="_13-3-1-参考卫星" tabindex="-1">13.3.1 参考卫星 <a class="header-anchor" href="#_13-3-1-参考卫星" aria-label="Permalink to &quot;13.3.1 参考卫星&quot;">​</a></h3><p>RTKLIB原本的参考星直接采用模糊度列表中的第一颗卫星，可能存在不稳定性。这里修改了原本参考星选择的方法和条件，并且参考星会从浮点过程沿用至模糊度固定过程中。同时在参考星切换时，将单差模糊度做相应的换算，避免所有的模糊度历史信息直接丢失而全部重置。</p><p>可以尽量选择高度角最高并且无半周跳和周跳的卫星，并将参考星保存在refsatIdx[]数组中，在浮点滤波器/宽巷模糊度固定/窄巷模糊度固定中均采用相同的参考星，保持了一致性。</p><h3 id="_13-3-2-多普勒约束" tabindex="-1">13.3.2 多普勒约束 <a class="header-anchor" href="#_13-3-2-多普勒约束" aria-label="Permalink to &quot;13.3.2 多普勒约束&quot;">​</a></h3><p>时间更新过程时，添加了多普勒速度约束。如果上个历元的最终解为单点解或者DGPS解，这里就用通过多普勒最小二乘得到的速度对滤波器中的速度进行约束。这样可以避免上个历元的浮点滤波观测值过少导致的速度发生极端偏离的情况。</p><p>另外RTKLIB输出DGPS的情况较少，在没有固定的时候，基本以Float结果为主。可以卫星数过少的情况下，输出DGPS解状态。这样简单的进行精度的广义区分。因为目前的算法并没有将伪距和相位进行分开滤波，因此无法获得仅使用伪距解算的DGPS解。</p><h3 id="_13-3-3-抗差估计" tabindex="-1">13.3.3 抗差估计 <a class="header-anchor" href="#_13-3-3-抗差估计" aria-label="Permalink to &quot;13.3.3 抗差估计&quot;">​</a></h3><p>ddres函数为计算双差残差的函数，验前残差（新息）与验后残差会共用该函数。在验前条件下，增加了抗差部分。依据残差采用IGG3模型调整观测协方差阵R阵，并且在残差普遍较大的情况下，同时调整状态协方差阵P阵，认为此时预测并不准。在验后则不进行这些操作。</p><p><strong>1. 调整R阵</strong></p><p>这个过程是单独针对少量观测值产生误差的情况。当单个观测值误差产生时，相应的残差v的值会明显增大。因此我们依赖残差v对每个观测值进行判断是否符合预期，当不符合时即采取降权的方法。</p><p>用HPHT+R与v的比值来确定R阵放大的倍数,采用IGGⅢ模型，由于这里是双差方程，针对单颗卫星的做法是仅放大单颗卫星的R，当系统内卫星超过半数都存在偏差时，可以认为参考星可能存在问题，此时对所有相关的协方差也要进行放大。</p><p><strong>2. 调整Q阵</strong></p><p>另外针对所有或者绝大多数残差值都很大的情况，此时可能并不是由于单个观测值产生了误差，而是预测值本身不准造成的。因此我们应当对滤波器的状态量的协方差进行放大，以反映预测值的不准确。</p><p>用残差v的平方和与HPHT+R的迹的比值来衡量状态量协方差阵的不符合程度。对于超出阈值k0的情况，需要对P阵整体放大alpha/k0倍，以降低滤波器对预测值的依赖程度。</p><h3 id="_13-3-4-航向约束" tabindex="-1">13.3.4 航向约束 <a class="header-anchor" href="#_13-3-4-航向约束" aria-label="Permalink to &quot;13.3.4 航向约束&quot;">​</a></h3><p>方法一：调整滤波器进行航向约束。航向约束只需要在观测向量z中增加航向观测即可，同时对H阵进行调整，不过该方法可能作用不大，至于基于后文的设计是无效的，暂不确定是否有更合适的方法。</p><p>方法二：调整量测更新的改正数。修改量测更新中的x += Ky，对其中的Ky进行侧向偏移判断，如果偏移较大的话，则进行修正，该方法经过验证是有效的。</p><p>方法二较为简单，下面对方法一进行介绍，其中预测阶段的内容与原先保持不变。</p><p><strong>1. 观测模型</strong></p><p>观测向量包括伪距、多普勒和航向：</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001137.jpg" alt=""></p><p><strong>1）伪距观测</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001234.jpg" alt=""></p><p><strong>2）多普勒观测</strong></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001333.jpg" alt=""></p><p><strong>3）航向观测</strong></p><p>航向从多普勒速度估计，基于ENU坐标系下的东向和北向速度分量。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001418.jpg" alt=""></p><p>注意：这里需要将ECEF速度转换为ENU速度。</p><p>观测方程为：</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001452.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001541.jpg" alt=""></p><p><strong>2. 观测噪声协方差</strong></p><p>观测噪声协方差矩阵 R 描述伪距、多普勒和航向观测的不确定性。这里我们主要观测其中的航向噪声。航向噪声如果设定得不好，通常会让滤波器崩溃：</p><p>航向噪声方差，动态计算以反映速度对可靠性的影响：</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-001632.jpg" alt=""></p><p><strong>3. 代码实现</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (stat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SOLQ_NONE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sol_lsq.ns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fabs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fabs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ecef2pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sol_lsq.rr, pos1);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ecef2enu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos1,sol_lsq.rr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,enu1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    psi_doppler1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atan2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ve </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ParPsi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ve, vn, pos1, par_psi);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 航向观测矩阵 H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NX_F] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> par_psi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[nv] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psi_doppler1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psi_doppler2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OMC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enu1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]));</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[nv] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SQR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 当航行观测缺失或不可靠的时候，直接跳过该历元的航向观测，并移除v、H、R中的相关信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nv;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_13-3-5-高程约束" tabindex="-1">13.3.5 高程约束 <a class="header-anchor" href="#_13-3-5-高程约束" aria-label="Permalink to &quot;13.3.5 高程约束&quot;">​</a></h3><p>原理类似航向约束，不过同样效果不是很显著。</p><p>采用约束高程、约束U向的速度加速度等方法。当时系统运行场景非常平坦时候，采用绝对高程进行U向的约束（哪怕是较紧约束，效果也比较一般）。</p><p>具体实现上，增加虚拟观测方程，对filter对rtk-&gt;x与rtk-&gt;P进行约束。其中对U方向位置的约束，则是采用参考结果转到ENU方向并且只对U方向位置进行约束。或者采用实际的高程值，构建U方向位置的方程进行约束。</p><p>对速度的约束则是，认为行进过程中U方向的速度为0，给定R=SQR(0.001)来构建虚拟观测方程，每个历元对U方向的速度进行约束。对速度和加速度的约束分两步，认为运动中U方向的速度和加速度都为0，给定R=SQR(0.001)，分别构建两个虚拟观测方程，从而达到约束U方向速度/加速度的作用。</p><p>上述的方法最终希望达到对浮点解U方向高程进行控制，使得历元间的高程之间形成约束。实际使用这些方法后，高程方向位置的稳定性的确得到了控制，但是对与平面的位置没有明显的作用。这可能本质上是由于滤波过程中，U方向的位置与平面位置之间的关联性并不强，最终导致即便是采用极端的固定值约束高程，水平位置也没有更好地往正确的位置收敛。</p><h2 id="_13-4-模糊度固定" tabindex="-1">13.4 模糊度固定 <a class="header-anchor" href="#_13-4-模糊度固定" aria-label="Permalink to &quot;13.4 模糊度固定&quot;">​</a></h2><p>在模糊度固定的流程上进行了一些调整。大体上是按照先固定宽巷模糊度，再固定L1/L2/L5模糊度的方式进行固定，另外采用了部分模糊度固定的方式。</p><h3 id="_13-4-1-增加宽巷模糊度固定流程" tabindex="-1">13.4.1 增加宽巷模糊度固定流程 <a class="header-anchor" href="#_13-4-1-增加宽巷模糊度固定流程" aria-label="Permalink to &quot;13.4.1 增加宽巷模糊度固定流程&quot;">​</a></h3><p>新增了宽巷模糊度固定流程。宽巷模糊度波长更长，理论上更容易固定为整周。在宽巷模糊度的约束基础之下再去固定L1/L2/L5的模糊度理论上也会更加容易。另外宽巷模糊度的固定也可以作为后续模糊度固定的控制条件。</p><p>目前双频的宽巷模糊度固定manage_amb_wl_LAMBDA与hold模糊度holdamb_wl的频点要输入参数进行控制，其中(0,1)作用于L1/L2双频固定，(0,2)作用于L1/L5双频固定。</p><h3 id="_13-4-2-部分模糊度固定" tabindex="-1">13.4.2 部分模糊度固定 <a class="header-anchor" href="#_13-4-2-部分模糊度固定" aria-label="Permalink to &quot;13.4.2 部分模糊度固定&quot;">​</a></h3><p><strong>1. 基于方差的部分模糊度固定</strong></p><p>这里的方差指的是双差模糊度状态验后的P，其代码流程如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 执行resamb_LAMBDA_par_new函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用其中的sort_idx对P值（Qb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Qc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;）大小进行排序</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3. 随后在循环中剔除P中较大模糊度，这里使用了QQb=Qb*1000，为的是方便观察：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for (int iter = 0; (iter &lt; nb / 3 || iter &lt; 3); iter++) {…}</span></span></code></pre></div><p>在做部分模糊度固定时，采用的基础循环框架是，当lambda失败时，则剔除一个模糊度重新进行固定。一般按照模糊度的方差P来决定剔除顺序，优先剔除方差较大的模糊度，这些模糊度被认为经过浮点滤波器未得到精确估计，可能造成后续的lambda失败。这个过程最少进行三次，最多去掉1/3向下取整的模糊度数。</p><p>这个方法目前只应用在了窄巷模糊度固定中。因为满足条件的宽巷模糊度本身就比较少，做剔除的意义不大，可能会导致固定很少的模糊度，得到一个精度很低的宽巷固定解；加之过多循环也会影响算法效率。</p><p><strong>2. 基于多解融合的部分模糊度固定</strong></p><p>该方法基于的思考是：认为模糊度收敛在了一个局部区域，导致最优/次优解比较接近，这么描述不一定精准，但是可以简单这么理解。</p><p>对于每个确定的待估计模糊度组，我们仍然基于lambda方法进行整周固定，并依据最优解/次优解/第三优解这三个解的结果和ratio值进行综合操作。对于每次循环，待固定模糊度个数nb_=nb-iter。如果ratio&gt;Max_thresar，则认为全部的nb_个模糊度固定成功，此时的最优解即为正确解；如果Max_thresar&gt;ratio&gt;nb_thresar（nb_thresar根据模糊度数量nb_确定），则接受其中的部分模糊度作为正确的模糊度，条件是：</p><ul><li>最优解中与上历元正确模糊度相等的模糊度</li><li>最优解与次优解相等，并与浮点模糊度差值在4以内，同时ratio[1]&gt;Min_thresar</li><li>最优解、次优解与第三优解一致，并于浮点模糊度差值在4以内，同时ratio[1]&gt;nb_thresar 且ratio[2]&gt;Min_thresar</li></ul><p>以上任一条件满足的话，则考虑该模糊度是OK，然后再来看有多少OK的模糊度，如大于85%。</p><p>类似于ratio值表征最优解与次优解的差异，这里增加了ratio[1]和ratio[2]表征次优解与第三优解的差异，第三优解与第四优解的差异。习惯地认为，与后一组解差异越大（存在断崖式差异）的解的可信性会更高。例如当ratio[2]足够大的时候，我们认为s[0]/s[1]/s[2]三者接近但s[3]与前三者差异很大，那么尽量去前三个解中找共同的部分进行固定。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// resamb_LAMBDA_par_new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">函数内部</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">可以简单理解成从浮点到整数的改正数，而第二个条件是当前计算的 ratio</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">大于自适应模糊度阈值（此时认为模糊度固定成功了一般）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">当前版本代码使用的是最优</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">次优前 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">的模糊度作为多解融合的基准</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rtk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sol.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ratio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rtk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sol.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thres</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>由于这种固定方法存在一定的风险，因此都限制了整周与浮点模糊度的差值在4以内。最终认为正确的模糊度数量必须在nb_的85%以上，才得到最终正确的模糊度。</p><p>同样的法二在宽巷模糊度固定和窄巷模糊度固定中的条件/参数等等的设置亦有不同，在此不对细节多做赘述，整体的思想内核是一致的。</p><p>其他启发：</p><ul><li>模糊度是一组一组，而不是选取每个模糊度单独的最优解来作为最优组合。只是一种感觉，而专业的描述。</li><li>模糊度收敛在了一个局部区域，导致最优/次优解比较接近，这么描述不一定精准，但是可以简单这么理解。</li></ul><h3 id="_13-4-3-demo5中的部分固定" tabindex="-1">13.4.3 demo5中的部分固定 <a class="header-anchor" href="#_13-4-3-demo5中的部分固定" aria-label="Permalink to &quot;13.4.3 demo5中的部分固定&quot;">​</a></h3><p>原本的模糊度固定本身有两个部分控制的方法：</p><p><strong>1. 加入卫星的动态调整与错峰固定</strong></p><p>其一是如果当前历元新增的卫星使得模糊度固定失败并且造成ratio大幅的下降，则将新加入的卫星按一定的顺序，通过调整nlock至负数的方式，使这些卫星可以错开加入滤波或固定，并且重新进行模糊度固定，这样做可以避免对滤波器的稳定性造成冲击，使得出现长时间难以固定的状况。该方法的优点是可以针对新加卫星过多难以固定的问题，同时缺点是一方面卫星的加入顺序会形成一定程度的不可控性，缓慢加入也不一定能够彻底解决无法固定的问题，另外一方面新加卫星数很多的情况往往是在短暂遮挡后卫星重新观测到，这样卫星缓慢的加入会导致待固定模糊度个数缓慢的上升，往往重固定也会变慢很容易超过10s以上。</p><p><strong>2. 随机剔除卫星以优化ratio值</strong></p><p>其二是如果模糊度个数足够但是ratio值检验不通过导致不固定，这时候会随机删除一个卫星使其不参与固定，并对他的nlock也置为负数。这个操作有些类似pntpos的raim环节，这里仅随机删除一个但不会进行循环。同样可能带来的负面影响也是容易给算法带来不确定性。</p><h3 id="_13-4-4-其他注意事项" tabindex="-1">13.4.4 其他注意事项 <a class="header-anchor" href="#_13-4-4-其他注意事项" aria-label="Permalink to &quot;13.4.4 其他注意事项&quot;">​</a></h3><p>另外在模糊度固定方面还有可以进一步的操作。例如在完成了初次的模糊度固定以后，还可以利用模糊度固定后的结果，对未成功固定的模糊度进行一轮固定，扩大固定的模糊度组，这样能够更大程度的抵御频繁遮挡的环境。</p><p><img src="https://raw.githubusercontent.com/salmoshu/Winchell-ImgBed/main/img/20250708-002400.jpg" alt=""></p><p>注意：RTKLIB-Demo5最终固定以后，会通过一些操作，得到最终的位置和误差协方差矩阵。也可以使用filter（量测）完成同样的工作，不过这里这里会减少计算量。</p><h2 id="_13-5-其他调整" tabindex="-1">13.5 其他调整 <a class="header-anchor" href="#_13-5-其他调整" aria-label="Permalink to &quot;13.5 其他调整&quot;">​</a></h2><h3 id="_13-5-1-卫星较少时的异常处理" tabindex="-1">13.5.1 卫星较少时的异常处理 <a class="header-anchor" href="#_13-5-1-卫星较少时的异常处理" aria-label="Permalink to &quot;13.5.1 卫星较少时的异常处理&quot;">​</a></h3><p>卫星数过少的情况下，输出DGPS解状态。这样简单的进行精度的广义区分。因为目前的算法并没有将伪距和相位进行分开滤波，因此无法获得只使用伪距解算的DGPS解。</p>`,134)),p(i)])}const c=a(l,[["render",e]]);export{F as __pageData,c as default};
