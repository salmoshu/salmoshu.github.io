import{_ as a,c as s,a4 as l,o as t}from"./chunks/framework.DKq7WeZY.js";const c=JSON.parse('{"title":"4. 应用构建","description":"","frontmatter":{"sidebarDepth":2},"headers":[],"relativePath":"algorithm/RTKLIB-Manual-CN/04-build.md","filePath":"algorithm/RTKLIB-Manual-CN/04-build.md"}'),e={name:"algorithm/RTKLIB-Manual-CN/04-build.md"};function p(n,i,h,r,d,k){return t(),s("div",null,i[0]||(i[0]=[l(`<h1 id="_4-应用构建" tabindex="-1">4. 应用构建 <a class="header-anchor" href="#_4-应用构建" aria-label="Permalink to &quot;4. 应用构建&quot;">​</a></h1><h2 id="_4-1-重新构建windows应用" tabindex="-1">4.1 重新构建Windows应用 <a class="header-anchor" href="#_4-1-重新构建windows应用" aria-label="Permalink to &quot;4.1 重新构建Windows应用&quot;">​</a></h2><p>为了修改RTKLIB中的一些功能，或者将您的新模型集成到RTKLIB中，您可能需要重新构建应用程序。此外，为了修复现有漏洞，您也可能需要重新构建应用并应用补丁。如果要在Windows上重新构建图形用户界面（GUI）和命令行界面（CUI）的应用程序，您需要使用 <a href="http://www.embarcadero.com" target="_blank" rel="noreferrer">Embarcadero C++ Builder</a> 或 <a href="https://visualstudio.microsoft.com" target="_blank" rel="noreferrer">Visual Studio</a> 。</p><p>demo5作者在最新的RTKLIB版本中提供了组织好的Visual Studio项目文件，位于 <code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\&lt;app&gt; or &lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\consapp\\&lt;app&gt;\\msc</code> 中。而下面展示的是如何在Windows上通过Embarcadero重新构建GUI和CUI应用程序。</p><p>1. 执行Embarcadero C++ Builder。</p><p>2. 执行C++ Builder中的菜单“File” - “Open Project...”，以打开目标应用程序的C++ Builder项目文件（<code>&lt;app&gt;.cbproj</code>或<code>_&lt;app&gt;.cbproj</code>，其中<code>&lt;app&gt;</code>是目标应用程序，如rtkpost、rtkplot或rtknavi），该文件位于应用程序目录中（<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\&lt;app&gt; or &lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\&lt;app&gt;\\bcc\\</code>）。</p><p>3. 执行C++ Builder中的菜单“Project” - “Rebuild<code>&lt;app&gt;</code>”来重新构建目标应用程序。</p><p>4. 执行（双击文件或输入命令）与项目文件同一目录下的Windows批处理文件install.bat。它会将新构建的可执行二进制程序复制到RTKLIB二进制程序目录（<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\bin</code>）。</p><p>5. 要重新构建所有的GUI应用程序或CUI应用程序，打开C++ Builder组项目文件<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\rtklib_winapp.gourppro</code>j或<code>&lt;install dir&gt;\\rtklib_&lt;ver&gt;\\app\\rtklib_consapp.gourpproj</code>。执行C++ Builder中的菜单“项目” - “构建所有项目”。执行同一目录下的批处理文件install_winapp.bat或install_consapp.bat，将它们复制到二进制程序目录。</p><h2 id="_4-2-编译cui应用" tabindex="-1">4.2 编译CUI应用 <a class="header-anchor" href="#_4-2-编译cui应用" aria-label="Permalink to &quot;4.2 编译CUI应用&quot;">​</a></h2><p>要构建CUI应用程序，您可以使用许多C编译器，例如gcc。RTKLIB包中包含了适用于gcc的标准makefile。根据您的编译器、库或目录，您可能需要修改makefile，以便根据您的环境生成应用程序。</p><p>1. 切换到目标应用程序的程序目录（<code>rtklib_&lt;ver&gt;/app/&lt;app&gt;</code>）。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install_di</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/rtklib_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/app/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>2. 移动到gcc目录</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span></span></code></pre></div><p>3. 编辑并修改makefile，以适应您的环境。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makefile</span></span></code></pre></div><p>4. 执行make来构建应用程序，然后执行make install将二进制文件安装到适当的BIN目录。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="_4-3-开发与使用rtklib" tabindex="-1">4.3 开发与使用RTKLIB <a class="header-anchor" href="#_4-3-开发与使用rtklib" aria-label="Permalink to &quot;4.3 开发与使用RTKLIB&quot;">​</a></h2><p>RTKLIB提供了以下可从用户应用程序调用的通用C函数。用户可以使用这些函数来开发原创的定位应用程序。</p><ul><li>矩阵和向量函数</li><li>时间和字符串函数</li><li>坐标转换和大地水准面模型</li><li>导航处理</li><li>定位模型（对流层、电离层、天线PCV）</li><li>SBAS差分GPS/DGNSS修正</li><li>单点定位</li><li>基于载波和基于码的相对定位</li><li>实时整数模糊度解算</li><li>接收机原始二进制数据输入</li><li>定位解算/NMEA输入/输出</li><li>RINEX观测数据/导航电文输入/输出</li><li>精密星历输入</li><li>流数据通信库</li><li>NTRIP（通过互联网协议传输RTCM的网络化传输）库</li><li>RTK-GPS/GNSS定位服务器</li><li>RTCM 2.3和3.0/3.1/3.2消息处理</li><li>下载器功能</li></ul><p>以下说明展示了如何在用户应用程序中利用RTKLIB的库。</p><p>1. 在用户应用程序的源程序中添加以下包含指令。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rtklib.h&quot;</span></span></code></pre></div><p>2. 设置以下编译器选项，将RTKLIB源代码目录路径添加到编译器的包含路径中。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtklib_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rc</span></span></code></pre></div><p>3. 将必要的RTKLIB库源文件添加到用于构建应用程序的源程序集中。关于库函数列表和RTKLIB提供的源程序，参考附录C库API。</p>`,28)]))}const g=a(e,[["render",p]]);export{c as __pageData,g as default};
